service: database

frameworkVersion: "3"

plugins:
  - serverless-dynamodb
  - serverless-stack-termination-protection
  - serverless-s3-bucket-helper
  - serverless-plugin-scripts
  - serverless-offline

s3BucketHelper:
  loggingConfiguration:
    destinationBucketName: ${env:LOGGING_BUCKET, ssm:/configuration/${self:custom.stage}/s3/accessLogsBucket, ssm:/configuration/default/s3/accessLogsBucket}
    logFilePrefix: ${env:LOGGING_BUCKET, ssm:/configuration/${self:custom.stage}/s3/accessLogsPrefix, ssm:/configuration/default/s3/accessLogsPrefix}

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  dotenv:
    path: ../../.env
  bannerTableName: ${self:custom.stage}-banners
  formTemplateTableName: ${self:custom.stage}-form-template-versions
  mfpReportTableName: ${self:custom.stage}-mfp-reports
  mfpFormBucket: ${env:MFP_FORM_BUCKET, "${self:service}-${self:custom.stage}-mfp"}
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  iam:
    role:
      path: ${env:IAM_PATH, ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${env:IAM_PERMISSIONS_BOUNDARY, ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:ListBucket"
            - "s3:PutObject"
resources:
  Resources:
    BannerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.bannerTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    FormTemplateVersionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.formTemplateTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
        LocalSecondaryIndexes:
          - IndexName: LastAlteredIndex
            KeySchema:
              - AttributeName: reportType
                KeyType: HASH
              - AttributeName: lastAltered
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: IdIndex
            KeySchema:
              - AttributeName: reportType
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: HashIndex
            KeySchema:
              - AttributeName: reportType
                KeyType: HASH
              - AttributeName: md5Hash
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        KeySchema:
          - AttributeName: reportType
            KeyType: HASH
          - AttributeName: versionNumber
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: reportType
            AttributeType: S
          - AttributeName: versionNumber
            AttributeType: N
          - AttributeName: lastAltered
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: md5Hash
            AttributeType: S
    MfpReportTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.mfpReportTableName}
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        AttributeDefinitions:
          - AttributeName: state
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: state
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST # Set the capacity to auto-scale
    MfpFormBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: !Sub ${self:service}-${self:custom.stage}-mfp
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
  Outputs:
    BannerTableName:
      Value: !Ref BannerTable
    BannerTableArn:
      Value: !GetAtt BannerTable.Arn
    BannerTableStreamArn:
      Value: !GetAtt BannerTable.StreamArn
    FormTemplateTableName:
      Value: !Ref FormTemplateVersionsTable
    MfpReportTableName:
      Value: !Ref MfpReportTable
    MfpReportTableArn:
      Value: !GetAtt MfpReportTable.Arn
    MfpReportTableStreamArn:
      Value: !GetAtt MfpReportTable.StreamArn
    MfpFormBucketName:
      Value: !Ref MfpFormBucket
    MfpFormBucketArn:
      Value: !GetAtt MfpFormBucket.Arn
    Region:
      Value: !Sub ${AWS::Region}
