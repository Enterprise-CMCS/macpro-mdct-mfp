# Refer to the README.md file in within this service directory to configure all ssm parameters required for this service.
service: app-api

frameworkVersion: "3"

package:
  individually: true

plugins:
  - serverless-plugin-typescript
  - serverless-dotenv-plugin
  - serverless-plugin-warmup
  - serverless-associate-waf
  - serverless-stack-termination-protection
  - serverless-idempotency-helper
  - serverless-iam-helper
  - serverless-s3-bucket-helper
  - serverless-api-client-certificate
  - serverless-offline

s3BucketHelper:
  loggingConfiguration:
    destinationBucketName: ${env:LOGGING_BUCKET, ssm:/configuration/${self:custom.stage}/s3/accessLogsBucket, ssm:/configuration/default/s3/accessLogsBucket}
    logFilePrefix: ${env:LOGGING_BUCKET, ssm:/configuration/${self:custom.stage}/s3/accessLogsPrefix, ssm:/configuration/default/s3/accessLogsPrefix}

custom:
  project: "mfp"
  serverlessPluginTypescript:
    tsConfigFileLocation: "./tsconfig.json"
  stage: ${sls:stage}
  region: ${aws:region}
  serverlessTerminationProtection:
    stages:
      - main
      - val
      - production
  dotenv:
    path: ../../.env
  bannerTableName: ${env:BANNER_TABLE_NAME, cf:database-${self:custom.stage}.BannerTableName}
  wpFormBucket: ${env:WP_FORM_BUCKET, cf:database-${self:custom.stage}.WpFormBucketName}
  wpReportTableName: ${env:WP_REPORT_TABLE_NAME, cf:database-${self:custom.stage}.WpReportTableName}
  wpReportTableStreamArn: ${env:WP_REPORT_TABLE_STREAM_ARN, cf:database-${self:custom.stage}.WpReportTableStreamArn, cf:database-main.WpReportTableStreamArn}
  formTemplateTableName: ${env:FORM_TEMPLATE_TABLE_NAME, cf:database-${self:custom.stage}.FormTemplateTableName}
  sarFormBucket: ${env:SAR_FORM_BUCKET, cf:database-${self:custom.stage}.SarFormBucketName}
  sarReportTableName: ${env:SAR_REPORT_TABLE_NAME, cf:database-${self:custom.stage}.SarReportTableName}
  sarReportTableStreamArn: ${env:SAR_REPORT_TABLE_STREAM_ARN, cf:database-${self:custom.stage}.SarReportTableStreamArn, cf:database-main.SarReportTableStreamArn}
  webAclName: ${self:service}-${self:custom.stage}-webacl
  associateWaf:
    name: ${self:custom.webAclName}
    version: V2
  serverlessApiClientCertificate:
    rotateCerts: true
    daysLeft: 30
  warmup:
    default:
      enabled: true
      prewarm: true
      events:
        - schedule: rate(60 minutes)
      concurrency: 5
      package:
        individually: true
  authValue:
    main: aws_iam
    val: aws_iam
    production: aws_iam
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  tracing:
    apiGateway: true
  logs:
    restApi: true
  iam:
    role:
      path: ${env:IAM_PATH, ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${env:IAM_PERMISSIONS_BOUNDARY, ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "*"
        - Effect: "Allow"
          Action:
            - ssm:GetParameter
          Resource: "*"
        - Effect: "Allow"
          Action:
            - execute-api:Invoke
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:ListBucket"
            - "s3:PutObject"
          Resource:
            - "arn:aws:s3:::${self:custom.wpFormBucket}"
            - "arn:aws:s3:::${self:custom.wpFormBucket}/formTemplates/*"
            - "arn:aws:s3:::${self:custom.wpFormBucket}/fieldData/*"
            - "arn:aws:s3:::${self:custom.sarFormBucket}"
            - "arn:aws:s3:::${self:custom.sarFormBucket}/formTemplates/*"
            - "arn:aws:s3:::${self:custom.sarFormBucket}/fieldData/*"
  environment:
    BANNER_TABLE_NAME: ${self:custom.bannerTableName}
    WP_REPORT_TABLE_NAME: ${self:custom.wpReportTableName}
    WP_FORM_BUCKET: ${self:custom.wpFormBucket}
    FORM_TEMPLATE_TABLE_NAME: ${self:custom.formTemplateTableName}
    SAR_REPORT_TABLE_NAME: ${self:custom.sarReportTableName}
    SAR_FORM_BUCKET: ${self:custom.sarFormBucket}
    STAGE: ${self:custom.stage}

functions:
  createBanner:
    handler: handlers/banners/create.createBanner
    events:
      - http:
          path: banners/{bannerId}
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                bannerId: true
  deleteBanner:
    handler: handlers/banners/delete.deleteBanner
    events:
      - http:
          path: banners/{bannerId}
          method: delete
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                bannerId: true
  fetchBanner:
    handler: handlers/banners/fetch.fetchBanner
    events:
      - http:
          path: banners/{bannerId}
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                bannerId: true
  archiveReport:
    handler: handlers/reports/archive.archiveReport
    events:
      - http:
          path: reports/archive/{reportType}/{state}/{id}
          method: put
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                reportType: true
                state: true
                id: true
  createReport:
    handler: handlers/reports/create.createReport
    events:
      - http:
          path: reports/{reportType}/{state}
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                reportType: true
                state: true
  fetchReport:
    handler: handlers/reports/fetch.fetchReport
    events:
      - http:
          path: reports/{reportType}/{state}/{id}
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                reportType: true
                state: true
                id: true
  fetchReportsByState:
    handler: handlers/reports/fetch.fetchReportsByState
    events:
      - http:
          path: reports/{reportType}/{state}
          method: get
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                reportType: true
                state: true
  releaseReport:
    handler: handlers/reports/release.releaseReport
    events:
      - http:
          path: reports/release/{reportType}/{state}/{id}
          method: put
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                state: true
                id: true
  submitReport:
    handler: handlers/reports/submit.submitReport
    timeout: 30
    memorySize: 2048
    events:
      - http:
          path: reports/submit/{reportType}/{state}/{id}
          method: post
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                reportType: true
                state: true
                id: true
  updateReport:
    handler: handlers/reports/update.updateReport
    timeout: 30
    memorySize: 2048
    events:
      - http:
          path: reports/{reportType}/{state}/{id}
          method: put
          cors: true
          authorizer: ${self:custom.authValue.${self:custom.stage}, ""}
          request:
            parameters:
              paths:
                reportType: true
                state: true
                id: true
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: !Ref ApiGatewayRestApi
    GatewayResponseDefault5XX:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId: !Ref ApiGatewayRestApi
    ApiGwWebAcl:
      Type: AWS::WAFv2::WebACL
      Properties:
        Name: ${self:custom.webAclName}
        DefaultAction:
          Block: {}
        Rules:
          - Action:
              Allow: {}
            Name: ${self:custom.webAclName}-allow-usa-plus-territories
            Priority: 0
            Statement:
              GeoMatchStatement:
                CountryCodes:
                  - GU # Guam
                  - PR # Puerto Rico
                  - US # USA
                  - UM # US Minor Outlying Islands
                  - VI # US Virgin Islands
                  - MP # Northern Mariana Islands
            VisibilityConfig:
              SampledRequestsEnabled: true
              CloudWatchMetricsEnabled: true
              MetricName: WafWebAcl
        Scope: REGIONAL
        VisibilityConfig:
          CloudWatchMetricsEnabled: true
          SampledRequestsEnabled: true
          MetricName: ${self:custom.stage}-webacl
  Outputs:
    ApiGatewayRestApiName:
      Value: !Ref ApiGatewayRestApi
    ApiGatewayRestApiUrl:
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}
    Region:
      Value: !Sub ${AWS::Region}
