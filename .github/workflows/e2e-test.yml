name: E2E Tests

on:
  workflow_call:
    inputs:
      base-url:
        description: 'Base URL for testing'
        required: true
        type: string
      test-filter:
        description: 'Test filter pattern (e.g., --grep-invert "@flaky|@probation")'
        required: false
        type: string
        default: '--grep-invert "@flaky|@probation"'
      timeout-minutes:
        description: 'Timeout for the test job in minutes'
        required: false
        type: number
        default: 60
      artifact-name-prefix:
        description: 'Prefix for artifact names'
        required: false
        type: string
        default: 'playwright'
      continue-on-error:
        description: 'Whether to continue on test failure'
        required: false
        type: boolean
        default: true
      upload-to-pages:
        description: 'Whether to upload results to GitHub Pages'
        required: false
        type: boolean
        default: false
      pages-destination-dir:
        description: 'Directory path for GitHub Pages upload'
        required: false
        type: string
        default: ''
      aws-role-varname:
        description: 'Environment variable name for AWS role (for branch-specific roles)'
        required: false
        type: string
        default: ''
      aws-region-varname:
        description: 'Environment variable name for AWS region (for branch-specific regions)'
        required: false
        type: string
        default: ''

    outputs:
      test-result:
        description: 'Result of the test execution'
        value: ${{ jobs.playwright-tests.result }}
      report-url:
        description: 'URL to the test report (if uploaded to pages)'
        value: ${{ jobs.upload-reports.outputs.report-url }}

permissions:
  id-token: write
  contents: write
  actions: read
  pages: write

jobs:
  playwright-tests:
    name: Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws-role-varname && secrets[inputs.aws-role-varname] || secrets.AWS_OIDC_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.aws-region-varname && secrets[inputs.aws-region-varname] || secrets.AWS_DEFAULT_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Install root dependencies
        run: yarn install

      - name: Install test dependencies
        run: yarn install
        working-directory: tests

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(yarn list @playwright/test --depth=0 --json | jq -r '.data.trees[].name' | sed 's/@playwright\/test@//')" >> $GITHUB_OUTPUT
        working-directory: tests

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: yarn playwright install --with-deps
        working-directory: tests

      - name: Run Playwright tests
        run: yarn playwright test ${{ inputs.test-filter }}
        working-directory: tests
        continue-on-error: ${{ inputs.continue-on-error }}
        env:
          BASE_URL: ${{ inputs.base-url }}
          CYPRESS_STATE_USER_EMAIL: ${{ secrets.CYPRESS_STATE_USER_EMAIL }}
          CYPRESS_STATE_USER_PASSWORD: ${{ secrets.CYPRESS_STATE_USER_PASSWORD }}
          CYPRESS_ADMIN_USER_EMAIL: ${{ secrets.CYPRESS_ADMIN_USER_EMAIL }}
          CYPRESS_ADMIN_USER_PASSWORD: ${{ secrets.CYPRESS_ADMIN_USER_PASSWORD }}
          SEED_ADMIN_USER_EMAIL: ${{ secrets.SEED_ADMIN_USER_EMAIL }}
          SEED_ADMIN_USER_PASSWORD: ${{ secrets.SEED_ADMIN_USER_PASSWORD }}
          SEED_STATE_USER_EMAIL: ${{ secrets.SEED_STATE_USER_EMAIL }}
          SEED_STATE_USER_PASSWORD: ${{ secrets.SEED_STATE_USER_PASSWORD }}

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: ${{ inputs.artifact-name-prefix }}-html-report-${{ github.run_number }}
          path: tests/playwright-report
          retention-days: 30

  upload-reports:
    name: Upload Reports to GitHub Pages
    needs: playwright-tests
    if: ${{ always() && inputs.upload-to-pages }}
    runs-on: ubuntu-latest
    outputs:
      report-url: ${{ steps.report-url.outputs.url }}
      timestamp: ${{ steps.timestampid.outputs.timestamp }}
    steps:
      - name: Set timestamp
        id: timestampid
        run: echo "timestamp=$(date --utc +%Y%m%d_%H%M%SZ)" >> "$GITHUB_OUTPUT"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: Install dependencies
        run: yarn install

      - name: Download test reports
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact-name-prefix }}-html-report-${{ github.run_number }}
          path: downloaded-html-report

      - name: Determine destination directory
        id: destination
        run: |
          if [[ -n "${{ inputs.pages-destination-dir }}" ]]; then
            echo "dest_dir=${{ inputs.pages-destination-dir }}/${{ steps.timestampid.outputs.timestamp }}" >> $GITHUB_OUTPUT
          else
            echo "dest_dir=${{ steps.timestampid.outputs.timestamp }}" >> $GITHUB_OUTPUT
          fi

      - name: Push files to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./downloaded-html-report
          destination_dir: ${{ steps.destination.outputs.dest_dir }}

      - name: Generate report URL
        id: report-url
        run: |
          ORG_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f1)
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          URL="https://${ORG_NAME}.github.io/${REPO_NAME}/${{ steps.destination.outputs.dest_dir }}/"
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "## ðŸ“Š ${{ inputs.artifact-name-prefix }} Test Results" >> $GITHUB_STEP_SUMMARY
          echo "Test results are available at: [$URL]($URL)" >> $GITHUB_STEP_SUMMARY